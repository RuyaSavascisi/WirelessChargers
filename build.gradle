buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
        classpath "org.spongepowered:mixingradle:0.7.+"
    }
}
apply plugin: "net.minecraftforge.gradle"
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: "eclipse"
apply plugin: "org.spongepowered.mixin"

version = project.mod_version + "-forge-" + project.minecraft_suffix
group = project.maven_group
archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(project.java_target)

println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))

repositories {
    flatDir {
        dirs "libs"
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    // Forge
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // Core library
//    implementation fg.deobf("curse.maven:supermartijn642s-core-lib-454372:${project.core_library_file}")
    implementation fg.deobf("com.supermartijn642:supermartijn642corelib:1.1.0-forge-mc1.12")
    // Config library
    implementation fg.deobf("curse.maven:supermartijn642s-config-lib-438332:${project.config_library_file}")

    // Baubles
    implementation fg.deobf("curse.maven:baubles-227083:${project.baubles_file}")
}

// Include resources generated by data generators.
sourceSets.main {
    resources.srcDir "src/generated/resources"
    // Make sure resources are available for 1.12
    output.setResourcesDir output.classesDirs.asPath
}

processResources {
    inputs.property "version", project.version

    filesMatching(["mcmod.info", "modid.mixins.json", "pack.mcmeta"]) {
        expand project.properties
    }

    rename "^modid.mixins.json\$", "${project.mod_id}.mixins.json"
    rename "^icon.png\$", "${project.mod_id}.png"
}

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version

    // accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    // Make sure the core lib's mixins get applied
    String core_lib_core_mod = "com.supermartijn642.core.coremod.CoreModPlugin"

    runs {
        client {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "fml.coreMods.load", core_lib_core_mod

            mods {
                source sourceSets.main
            }
        }

        server {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "fml.coreMods.load", core_lib_core_mod

            mods {
                source sourceSets.main
            }
        }

        data {
            parent runs.client
            property "--generatorModid", project.mod_id
            property "--output", file("src/generated/resources/")
            property "--existing", file("$buildDir/data_resources")
        }
    }
}

task processSources(type: Sync) {
    from sourceSets.main.java
    into "$buildDir/sources"
    inputs.property 'version', version

    // Replace mod properties in main mod class
    Hashtable<String, String> properties = new Hashtable<>()
    project.properties.entrySet().stream()
            .filter(entry -> entry.key instanceof String && entry.value instanceof String)
            .forEach(entry -> properties.put(entry.key, entry.value))
    filesMatching(project.mod_package.replace('.', '/') + "/" + project.mod_main_class + ".java") {
        //noinspection UnnecessaryQualifiedReference
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: properties)
    }
}

compileJava {
    source = processSources.outputs
}

task prepareDataResources(type: Sync) {
    from file("src/main/resources")
    into "$buildDir/data_resources"
    inputs.property "version", version

    filesMatching(["mcmod.info", "modid.mixins.json", "pack.mcmeta"]) {
        expand project.properties
    }

    exclude "**/*.pdn"

    rename "^modid.mixins.json\$", "${project.mod_id}.mixins.json"
    rename "^icon.png\$", "${project.mod_id}.png"
}

// Run prepareDataResources before prepareRunData
tasks.whenTaskAdded {
    if (it.name == "prepareRunData")
        it.dependsOn "prepareDataResources"
}
